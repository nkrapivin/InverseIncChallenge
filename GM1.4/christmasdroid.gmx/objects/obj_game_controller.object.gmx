<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize variables and set gen timer.

caption = "EMPLOYEE ID: " + string(global.seed);
room_caption = caption;
window_set_caption(caption);

alarm[0] = 1;
inc = 1; // time increment speed.

// play funky music.
if (!audio_is_playing(snd_summertime)) {
    scr_playsound(snd_summertime, true);
}

// lel.
// must have leaked Sony PS4 SDK installed to be a legit dev.
is_dev = environment_get_variable("USERNAME") == "nikita"
    &amp;&amp; environment_get_variable("SCE_ORBIS_SAMPLE_DIR") == "D:\SDKs\SCE\ORBIS SDKs\5.500\target\samples";
    
if (os_type == os_android) {
    os_map = os_get_info();
    is_dev = os_version == 28 &amp;&amp; os_map[? "MANUFACTURER"] == "Xiaomi";
    ds_map_destroy(os_map);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate the level.

var setPl, setEx, spAm, prikol, w, h; // setplayer, setexit.
setPl = false;
setEx = false;
spAm = 1 + irandom(9);
prikol = 0;

// grid boundaries.
w = 512;
h = 352;

while (!setPl || !setEx) {
    with (obj_tile) {
    
        // boundary/etc checks...
        if (image_blend != c_white) continue;
        if (x &lt; 128 || y &lt; 128 || x &gt; w || y &gt; h) continue;
        
        prikol = 1000 + irandom(32000);
        
        if (prikol &gt; 31000 &amp;&amp; !setPl) {
            setPl = true;
            script_step = scr_player_step;
            continue;
        }
        else if (prikol &gt; 30000 &amp;&amp; !setEx) {
            setEx = true;
            if (setEx) {
                if (choose(0,0,0,1,1,1) == 1) {
                    script_step = scr_special_step;
                }
            }
            
            script_step = scr_finish_step;
            continue;
        }
        else if (prikol &gt; 20000) {
            // keep it white.
            continue;
        }
        else if (prikol &gt; 15000) {
            // special, woooooooo
            if (spAm &gt; 0) {
                script_step = scr_special_step;
            }
            
            spAm -= 1;
            continue;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Poll input.

// was too lazy to implement joysticks or stuff like that...
left = keyboard_check_pressed(vk_left);
right = keyboard_check_pressed(vk_right);
up = keyboard_check_pressed(vk_up);
down = keyboard_check_pressed(vk_down);

if (os_type == os_android) {
    with (obj_touch_controls) {
        other.left = once[1];
        other.right = once[3];
        other.up = once[0];
        other.down = once[2];
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///time... (and lives)

global.time += inc;

// die.
if (lives &lt; 1) {
    room_goto(rom_death);
}


if (is_dev) {
    room_caption = caption + " [dev mode]";
    window_set_caption(caption + " [dev mode]");
    
    if (keyboard_check_pressed(vk_f2)) {
        scr_next_level();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw "HUD".

draw_set_font(fnt_text);
draw_set_halign(fa_left);
draw_set_valign(fa_bottom);
draw_set_color(c_red);
draw_text(obj_border.x, obj_border.y, "LIVES: " + string(lives) + "#LEVEL: " + string(health));
draw_set_valign(fa_top);
draw_text(obj_border.x, obj_border.y + obj_border.h, "TIME: " + string(floor(global.time / room_speed)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
