<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init results object.

scr_stopsound(snd_summertime);

text_curr = "AND SO,#HERE ARE THE RESULTS...##TIME: " + string(global.time / room_speed) + " SECONDS / " + string(global.time) + " STEPS.##";
if (global.net) {
    text_curr += "UPLOAD YOUR RESULTS TO INVERSE INC. (Y/N)? #";
}

drawreporting = false;
reported = false;
reportstr = "REPORTING...";
quitting = false;
quittime = 3 * room_speed; // 3 seconds.

success = "Report ok.";
phpurl = "https://inversedog.ddns.net/dogs.php";
http = -1;

margin = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///quit the game.
show_debug_message("Quitting...");
scr_game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///report the result if needed.

if (quitting || !global.net) exit;

var N, Y;
N = false;
Y = false;

with (obj_touch_number) {
    if (c == "N" &amp;&amp; once) N = true;
    else if (c == "Y" &amp;&amp; once) Y = true;
}

if (N || keyboard_check_pressed(ord("N"))) {
    text_curr += "N";
    reportstr = "UNDERSTOOD. QUITTING...";
    quitting = true;
    drawreporting = true;
    alarm[0] = quittime;
    
    exit;
}

if (!drawreporting &amp;&amp; (Y || keyboard_check_pressed(ord("Y")))) {
    drawreporting = true;
    text_curr += "Y";
    exit;
}

if (drawreporting &amp;&amp; !reported &amp;&amp; http == -1) {
    var post; post = "time=" + string(global.time) + "&amp;employeeid=" + string(global.seed);
    
    http = http_post_string(phpurl, post);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///did we report the result fine?

var _id, _status, _url, _result;
_id = ds_map_find_value(async_load, "id");
_status = ds_map_find_value(async_load, "status");
_url = ds_map_find_value(async_load, "url");
_result = ds_map_find_value(async_load, "result");
if (is_undefined(_result)) _result = "&lt;result is undefined&gt;";

show_debug_message(json_encode(async_load));

reported = true;
if (_status != 0 || _url != phpurl/* || _result != success*/) {
    reportstr = "FAILED!#";
    
    // so we did receive a response just fine, but it's an error :\
    if (_status == 0 &amp;&amp; string_count("failure", _result) &gt; 0) {
        reportstr += "BACKEND SERVER ERROR.#";
    }
    else {
        reportstr += "INTERNET ERROR.#";
    }
    
    reportstr += _result;
}
else {
    // we're done here, wait a bit and quit.
    reportstr = "REPORTED. QUITTING...";
    quitting = true;
    alarm[0] = quittime;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the congratulations text.

draw_set_color(c_red);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(fnt_text);
draw_text(x, y, text_curr);

//draw THE DOG.
draw_sprite(spr_THE_DOG, 0, room_width, room_height);

if (drawreporting) {
    draw_set_halign(fa_right);
    draw_set_valign(fa_bottom);
    draw_text_ext(room_width - sprite_get_width(spr_THE_DOG) - margin, room_height - sprite_get_height(spr_THE_DOG)/2, reportstr, -1, room_width/2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
