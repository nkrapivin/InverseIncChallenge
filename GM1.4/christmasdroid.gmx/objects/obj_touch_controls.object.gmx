<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_touch_arrow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize.
///Allocate arrays and calculate positions.

margin = 32;
arrows = 4;

// allocate arrays in reverse (which makes the thing faster)
for (var i = arrows - 1; i &gt; -1; i--) {
    pressed[i] = false;
    once[i] = false;
    prev_pressed[i] = false;
    released[i] = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update draw positions.

// get gui layer wh
display_set_gui_maximise();
var gh;
gh = display_get_gui_height();

// scale.
image_xscale = 1;
image_yscale = 1;

// set draw position.
margin = max(sprite_width, sprite_height) + (32 * min(image_xscale, image_yscale));
x = margin;
y = gh - margin;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check for input.

var p, po, px, py;
p = device_mouse_check_button(0, mb_left);
po = device_mouse_check_button_pressed(0, mb_left);
px = device_mouse_x_to_gui(0);
py = device_mouse_y_to_gui(0);

var x1, y1, x2, y2, sprmargin, w, h;
w = sprite_width * image_xscale;
h = sprite_height * image_yscale;
sprmargin = h - (sprite_get_bbox_bottom(sprite_index) * image_yscale);

// copy the previous state.
array_copy(prev_pressed, 0, pressed, 0, arrows);

// only bother if we've actually pressing at the screen.
if (p) {
    // angle 0
    x1 = x - w/2;
    x2 = x + w/2;
    y1 = y - h;
    y2 = y - sprmargin;
    
    pressed[0] = point_in_rectangle(px, py, x1, y1, x2, y2);
    
    // angle 90
    x1 = x - h;
    x2 = x - sprmargin;
    y1 = y - w/2;
    y2 = y + w/2;
    
    pressed[1] = point_in_rectangle(px, py, x1, y1, x2, y2);
    
    
    // angle 180
    x1 = x - w/2;
    x2 = x + w/2;
    y1 = y + sprmargin;
    y2 = y + h;
    
    pressed[2] = point_in_rectangle(px, py, x1, y1, x2, y2);
    
    // angle 270
    x1 = x + sprmargin;
    x2 = x + h;
    y1 = y - w/2;
    y2 = y + w/2;
    
    pressed[3] = point_in_rectangle(px, py, x1, y1, x2, y2);
}
else {
    for (var i = 0; i &lt; arrows; i++) {
        pressed[i] = false;
    }
}

// calculate pressed and released states.
for (var i = 0; i &lt; arrows; i++) {
    once[i] = !prev_pressed[i] &amp;&amp; pressed[i];
    released[i] = prev_pressed[i] &amp;&amp; !pressed[i];
}

// hehe
if (po &amp;&amp; obj_game_controller.is_dev) {
    if (point_in_rectangle(px, py, 0, 0, 128, 128)) {
        scr_next_level();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw buttons.

// draw arrows.
draw_sprite_ext(spr_touch_arrow, pressed[0], x, y, image_xscale, image_yscale, 0,   image_blend, image_alpha);
draw_sprite_ext(spr_touch_arrow, pressed[1], x, y, image_xscale, image_yscale, 90,  image_blend, image_alpha);
draw_sprite_ext(spr_touch_arrow, pressed[2], x, y, image_xscale, image_yscale, 180, image_blend, image_alpha);
draw_sprite_ext(spr_touch_arrow, pressed[3], x, y, image_xscale, image_yscale, 270, image_blend, image_alpha);

if (obj_game_controller.is_dev) {
    draw_set_color(c_red);
    draw_rectangle(0, 0, 128, 128, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stub.
// Do nothing!
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
